/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.sirius.distributor.ui;

import java.awt.image.ImageObserver;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.JToggleButton;
import javax.swing.plaf.basic.BasicBorders;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import ru.sirius.distributor.db.NomenclatureHelper;
import ru.sirius.distributor.model.Classificator;

/**
 *
 * @author igor
 */
public class NomenclatureFrame extends javax.swing.JInternalFrame {

    TreeModel treeModel;
    TableModel tableModel;

    /**
     * Creates new form NomenclatureFrame
     */
    public NomenclatureFrame() {
        treeModel = new DefaultTreeModel(createClassificationTree());
        tableModel = new ArticleTableModel();
        initComponents();
    }

    private DefaultMutableTreeNode createClassificationTree() {

        int rootIndex = 0;
        Map<Integer, DefaultMutableTreeNode> nodes = new HashMap<>();

        for (Classificator classification : NomenclatureHelper.getGROUPS().values()) {

            DefaultMutableTreeNode node = new DefaultMutableTreeNode(classification);
            node.setAllowsChildren(true);
            nodes.put(classification.getId(), node);
        }

        for (DefaultMutableTreeNode node : nodes.values()) {
            Classificator classification = (Classificator) node.getUserObject();
            if (classification.getParentId() == 0) {
                rootIndex = classification.getId();
            } else {
                nodes.get(classification.getParentId()).add(node);
            }

        }

        return nodes.get(rootIndex);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        treeToggleButton = new javax.swing.JToggleButton();
        treeButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Номенклатура");
        setAutoscrolls(true);
        setFocusTraversalPolicyProvider(true);
        setVisible(true);

        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(130, 20));
        jToolBar1.setMinimumSize(new java.awt.Dimension(100, 20));

        treeToggleButton.setText("jToggleButton1");
        treeToggleButton.setFocusable(false);
        treeToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        treeToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        treeToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                treeToggleButtonItemStateChanged(evt);
            }
        });
        jToolBar1.add(treeToggleButton);

        treeButton.setText("jButton1");
        treeButton.setFocusable(false);
        treeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        treeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(treeButton);

        jButton2.setText("jButton2");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(3);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(531, 380));

        jTree2.setModel(treeModel);
        jTree2.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTree2);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jTable1.setModel(tableModel);
        jTable1.setDragEnabled(true);
        jScrollPane3.setViewportView(jTable1);

        jSplitPane1.setRightComponent(jScrollPane3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree2ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree2ValueChanged
        TreePath path = evt.getNewLeadSelectionPath();
        DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) path.getLastPathComponent();
        ArrayList<Integer> set = new ArrayList<>();
        Enumeration<DefaultMutableTreeNode> enumeration = currentNode.depthFirstEnumeration();
        while (enumeration.hasMoreElements()) {
            DefaultMutableTreeNode node = enumeration.nextElement();
            Classificator classification = (Classificator) node.getUserObject();
            set.add(classification.getId());
        }
        int t = 100;
//        System.out.println(classification);
//        tableModel - > set current node !!!
    }//GEN-LAST:event_jTree2ValueChanged

    private void treeToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_treeToggleButtonItemStateChanged
        if (treeToggleButton.isSelected()) {
            jSplitPane1.setDividerLocation(0);
            jTree2.setVisible(false);
        } else {
            jTree2.setVisible(true);
        }
    }//GEN-LAST:event_treeToggleButtonItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree2;
    private javax.swing.JButton treeButton;
    private javax.swing.JToggleButton treeToggleButton;
    // End of variables declaration//GEN-END:variables
}
